Худший способ научиться программировать

- Что нужно делать, а что не нужно, когда начинаете обучение программированию.
- Когда начинаете обучение, не окружайте себя людьми, которые говорят, что программирование — это сложно. Потому что в таком случае это покажется гораздо сложнее, чем на самом деле. Если вы подойдете к этому с мыслью, что это очень сложно, я могу гарантировать, что вы возненавидите это. Относится к любой теме обучения, на самом деле.
- Пока вы еще новичок, вокруг вас есть люди, которые делают такую же работу за 10% того времени, которое у вас уходит на это. Но в любом случае, пожалуйста, не копируйте чужие решения. Единственная причина, по которой вы должны смотреть на чей-то код — если хотите помочь им, или посмотреть, как другие оптимизируют свои решения.
- Продолжая тему копирования, с Интернетом множество решений доступно онлайн. Если нет тех, которые вам нужны, есть очень полезные форумы, типа StackOverflow, где люди могут вам помочь. Это все здорово, конечно, но я все равно часто вижу, как люди просят целый код. Отвечая на такие вопросы, в первую очередь я спрашиваю: “А что вы попробовали, чтобы сделать все сами?” Даже если проблема выглядит реально сложной, но у вас есть хоть какая-то идея, вы все равно перейдете от одной идее к другой, а дальше к решению, и это лучше всего.
- Важно написать алгоритм перед тем, как писать код для решения какой-либо задачи. Часто люди просто читают задачу и сразу начинают печатать, забывая решение за 15 минут и в результате разочаровываются.
- Как только вы получите правильный алгоритм, вы должны быть уверены в синтаксисе языка программирования! Лучшие алгоритмы могут пострадать, если не осуществляются должным образом в коде.
- Дисциплина — это очень важно. Обучение программированию значит, что вам придется писать код каждый день. Такой уровень дисциплины очень сложно соблюдать, пока это не станет привычкой. Написание кода в течение часа в день должно стать частью вашей жизни.
- Люди, обучаясь программированию, бывают очень любопытными, что часто приводит к тому, что они, не углубляясь, изучают только базовые вещи. Поэтому, прежде всего, выберите язык или фреймворк, который хотите изучать, и ресурсы, которые вы хотите использовать для этого.
- Программирование — это изначально коллективная работа. Начиная с вопросов и ответов на StackOverflow, и заканчивая использованием открытых исходных кодов, написанных другими. Почти 100% программистов сейчас работают совместно. Если вы обучаетесь один, вы упускаете все лучшие практики, тратя время, фокусируясь на неправильных вещах, и теряете некоторые ключевые навыки, которые нужны вам, как программисту. Найдите напарника, с которым вы сможете обучаться, и кого-то опытного, кто сможет помогать вам на пути обучения.
- Вы можете часто расстраиваться из-за того, что у вас что-то не получается: вы можете застрять на одной задаче на несколько часов. Но терпение — это очень важно. Не забывайте, что всегда есть решение, даже если оно займет много времени, пытайтесь добиться всего сами (держите в голове пункт 3).

https://www.quora.com/Whats-the-worst-way-to-learn-programming


- https://tproger.ru/
- https://github.com/bzick/oh-my-backend#oh-my-backend
- https://naxoc.net/
- https://sijinjoseph.netlify.app/programmer-competency-matrix/
- https://habr.com/
- https://ingodwetrust.ru/


## Python
- https://pythonarsenal.com/ Python arsenal for Reverse Engineering
- https://pythonworld.ru/ Python 3 для начинающих

### Python StackOverflow
- https://stackoverflow.com/questions/2150108/efficient-way-to-rotate-a-list-in-python
- https://stackoverflow.com/questions/1212025/moving-values-but-preserving-order-in-a-python-list
- https://stackoverflow.com/questions/9457832/python-list-rotation




- https://younglinux.info/

## Handwriting
Hands On The Sigmund Freud Typeface: Making A Font For Your Shrink
- https://www.smashingmagazine.com/2014/06/hands-on-sigmund-freud-typeface-making-fonts/

Beautiful Handwriting Styles, Lettering and Calligraphy
- https://www.smashingmagazine.com/2008/04/beautiful-handwriting-lettering-and-calligraphy/





## Russian Language

В русском языке 6 падежей. Вот как изменяется личное местоимение ты: падеж
Им. ты Р. тебя́ Д. тебе́ В. тебя́ Тв. тобо́й, тобо́ю Пр. тебе́

ТЕБЯ - Genitive case, ТЕБЕ - Dative case.

Examples: У тебя есть яблоки. Тебе нравится яблоки


> ТЕБЯ - Genitive case
ТЕБЯ - genitive and accusative cases






#### Frames:

frame1: fixed_center
frame2: nonfixed
frame3: 1+night_mode
frame4: 2+night_mode



### CS:GO
Binds
  - Bind c "incrementvar cl_radar_scale 0.45 0.8 0.35"




"Смерть, от которой вы убегаете, настигнет вас, после чего вы вернетесь к Ведающему сокровенное и явное, и Он сообщит вам о том, что вы совершали". (Коран 62:8)

112:1. Скажи: «Он — Аллах Единый,
112:2. Аллах Самодостаточный.
112:3. Он не родил и не был рожден,
112:4. и нет никого равного Ему».


- HackTheBox
- TryHackMe
- VulnHub
- root-me
- OverTheWire


----------------------------------------------------------------------------------------------------------------


    5 Useful Git Commands for Devs
We are wrapping up project week for my bootcamp and it has been a lot of fun. I really feel like the best way to learn how to code it to build something from scratch and to work with a team. One thing we did not take advantage of us much as we could have is the use of various git commands. That inspired me to write this blog so I could learn more and leverage more git commands for future projects. Here are 5useful git commands that I would like to use more in the future.

- 1. Git Revert
Git Revert is a useful command that safely undoes commits. The user must first type ‘git log-oneline’ to reference their commit history. After that they will be given a hash code and the user has to specify which commit they want reverted. An example of a command would be ‘git revert 323145’. The command will create a new commit with out deleting the older one. This is useful because you can still see all reverted commits in history.

- 2. Git Branch
Branches are a useful tool when working with a team of fellow devs. Several devs can work on their respective branches locally and merge them (see #5) when they are ready to go on the main branch. You can create, list, and delete branches with this command. This was the main command that inspired this blog as it is a must when working on bigger projects.

- 3. Git Status
Git status is command gives the user all important info about the current branch they are in. The user can figure out if the branch is up to date or if there is anything to commit. These are just a couple of the many things a user can learn when using git status

- 4. Git Checkout
To work in a branch, first you need to switch to it. Git Checkout is used mostly for switching from one branch to another. We can also use it for checking out files and commits. Two steps are required for this command; the first changes in current branch must be committed or stashed and second the branch you want to switch to should be local.

- 5. Git Merge
Git merge is used when the user has completed work in his/her branch and is ready to merge it back to the parent branch. It injects your branch and all of its features into the main. In our project I wish we utilized the git branch/git merge combination more and is definitely something I will look to utilize moving forward.




Having people running the system who have  never gotten their hands dirty is a very dangerous thing . Didn't someone say: "Give academics everything they want except power"

¯\_(ツ)_/¯


- Кумулятивный эффект


- Data gathering



A tip from someone who's 4 years self-taught:
Make something that makes you want to create
